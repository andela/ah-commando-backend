openapi: 3.0.1

info:
  title: Author's Haven Commando API
  description: |
    Author's Haven is a community for like minded authors to foster inspiration and innovation by leveraging the modern web.
  contact:
    email: team-commando@author-haven.com
  version: 1.0.0
externalDocs:
  description: The GitHub Repository
  url: 'https://github.com/andela/ah-commando-backend'
servers:
  - url: '/api/v1'
  - url: 'https://a-haven-staging.herokuapp.com/api/v1'
tags:
  - name: Welcome
    description: The root endpoint
  - name: Users
    description: Operations related to Users authentication
  - name: Profiles
    description: Operations related to User's profile
  - name: Articles
    description: Operations about the Articles

paths:
  /:
    get:
      tags:
        - Welcome
      summary: The root endpoint
      description: The root endpoint
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        '404':
          description: Endpoint not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /users:
    post:
      tags:
        - Users
      summary: To signup new users
      description: This endpoint signs up a new user using their email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    firstname:
                      type: string
                    lastname:
                      type: string
                    username:
                      type: string
                    email:
                      type: string
                    password:
                      type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /users/login:
    post:
      tags:
        - Users
      summary: User login
      description: An endpoint to log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
      responses:
        '200':
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '401':
          description: Invalid login details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /users/google:
    get:
      tags:
        - Social user
      summary: User login
      description: An endpoint to login a user via social media accounts
      responses:
        '200':
          description: user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /users/facebook:
    get:
      tags:
        - users
      summary: User login
      description: An endpoint to login a user via social media accounts
      responses:
        '200':
          description: user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /users/logout:
    post:
      tags:
        - Users
      summary: User logs out
      description: An endpoint to log out a user
      responses:
        '204':
          description: Logout successful
        '401':
          description: Invalid login details
  /user:
    get:
      tags:
        - Profiles
      security:
        - bearerAuth: []
      summary: Get an Authorised User's profile
      description: The endpoint to get authorised user's profile
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
        '401':
          description: Authorization error

    put:
      tags:
        - Profiles
      security:
        - bearerAuth: []
      summary: Edit User's profile
      description: The endpoint to edit user's profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    bio:
                      type: string
                    email:
                      type: string
                    image:
                      type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
        '401':
          description: Authorization error
  /users/passwordReset:
    post:
      tags:
        - Users
      summary: Send password reset link to users
      description: An endpoint to send password reset link to users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
      responses:
        '200':
          description: Password Link sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/password"
        '404':
          description: No user found with email supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /users/resetPassword/{id}/{token}:
    put:
      tags:
        - Users
      summary: Send password reset link to users
      description: An endpoint to send password reset link to users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: user id in database
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: user token autogenerated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    password:
                      type: string
      responses:
        '200':
          description: Password Reset Successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/password"
        '401':
          description: No user found, or invalid reset token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
  /user/confirmEmail:
    get:
      tags:
        - Users
      summary: Registered email verification
      description: Enables a user to be able verify their email after successful registeration
      parameters:
        - in: query
          name: token
          schema:
              type: string
          required: true
        - in: query
          name: id
          schema:
              type: number
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        400:
          description: Bad request due to Invalid verification link
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /articles:
    post:
      tags:
        - Articles
      security:
        - bearerAuth: []
      summary: Article created
      description: Authorized User can create article
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                article:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    articleBody:
                      type: string
                    tagList:
                      type: string
                    image:
                      type: string
      responses:
        '201':
          description: Create an Article
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '400':
          description: Supplied Wrong or Incomplete inputs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '401':
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

    get:
      tags:
        - Articles
      summary: get all articles
      description: user can get all articles
      responses:
        '200':
          description: successfully view all articles
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /articles/{slug}:
    get:
      tags:
        - Articles
      summary: get a single article
      description: users can get a single article
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successfully viewed an articles
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /articles/{slug}/edit:
    put:
      tags:
        - Articles
      security:
        - bearerAuth: []
      summary: Only edit articles created by me
      description: Only Owner of an Article can edit that article
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                article:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    articleBody:
                      type: string
                    tagList:
                      type: string
                    image:
                      type: string
      responses:
        '200':
          description: successfully edit an articles
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /articles/{slug}/:
    delete:
      tags:
        - Articles
      security:
        - bearerAuth: []
      summary: Only delete articles created by me
      description: Only Owner of an Article can delete that article
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successfully delete an article
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /likes/{resourceId}:
    post:
      tags:
        - likes
      security:
        - bearerAuth: []
      summary: Like or Dislike an article or comment
      description: Authorised users canlike or dislike an article
      parameters:
        - in: path
          name: resourceId
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                liked:
                  type: boolean
                type:
                  type: string
      responses:
        '200':
          description: successfully like an article
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /image:
    post:
      tags:
        - Image
      security:
        - bearerAuth: []
      summary: Image upload endpoint
      description: Only authorized users can upload Image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: successfully uploaded an image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /profiles/{username}:
    get:
      tags:
        - Profiles
      summary: User's profile
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username of the user to get
      description: The endpoint to get any user's profile
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
        '401':
          description: Authorization error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /profiles/{username}/follow:
    post:
      tags:
        - Profiles
      security:
        - bearerAuth: []
      summary: Follow a user
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username of the user to follow
      description: An endpoint to follow a user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        '401':
          description: Authorization error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
    delete:
      tags:
        - Profiles
      security:
        - bearerAuth: []
      summary: Unfollow a user
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username of the user to unfollow
      description: An endpoint to unfollow a user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        '401':
          description: Authorization error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /comment/{postId}/:
    post:
      tags:
        - Articles
      security:
        - bearerAuth: []
      summary: comment on an article
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          description: Id of the post to comment on
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      description: An endpoint to make a comment on Articles
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        '401':
          description: Authorization error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    user:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: integer
            token:
              type: string
            username:
              type: string
            firstname:
              type: string
            lastname:
              type: string
            email:
              type: string
            bio:
              type: string
            image:
              type: string
              nullable: true
    password:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
    profile:
      type: object
      properties:
        firstname:
            type: string
        lastname:
          type: string
        username:
          type: string
        email:
          type: string
        bio:
          type: string
        image:
          type: string
        following:
          type: boolean
        followers:
          type: object
        followings:
          type: object
    article:
      type: object
      properties:
        slug:
          type: string
        title:
          type: string
        description:
          type: string
        body:
          type: string
        tagList:
          type: array
        createdAt:
          type: string
        updatedAt:
          type: string
        favorited:
          type: boolean
        favoritesCount:
          type: string
        author:
          type: object
    image:
      type: object
      properties:
        image:
          type: string
    errorResponse:
      type: object
      properties:
        status:
          type: number
        error:
          type: string

    successResponse:
      type: object
      properties:
        status:
          type: number
        message:
          type: string
